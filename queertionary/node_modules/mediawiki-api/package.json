{
  "name": "mediawiki-api",
  "version": "0.1.5",
  "description": "MediaWiki API Wrapper",
  "maintainers": [
    {
      "name": "Ryan Scheel",
      "email": "ryan.havvy@gmail.com",
      "url": "http://widget.mibbit.com/?channel=%23havvy&server=irc.mibbit.net"
    }
  ],
  "contributors": [
    {
      "name": "Ryan Scheel",
      "email": "ryan.havvy@gmail.com",
      "url": "http://widget.mibbit.com/?channel=%23havvy&server=irc.mibbit.net"
    }
  ],
  "main": "lib",
  "directories": [
    "lib"
  ],
  "engines": {
    "node": ">=0.6.7"
  },
  "keywords": [
    "irc"
  ],
  "dependencies": {
    "ahr2": ">=2.3.2"
  },
  "readme": "This is a wrapper library for the Mediawiki API.\n\nThis library is woefully incomplete. The only parts implemented were those\nnecessary to collect all the pages in a category and append text to it.\n\nIf you need more functionality, file an issue, and it'll get fixed, fix it\nyourself and send a push request, or use the internal _request method that\nis explained later in this article.\n\nIt is likely that in the future the callback that every function requires will\nbecome optional.\n\n## Installation\n\n```\nnpm install mediawiki-api\n```\n\n### Usage\n\n```javascript\nvar MediaWikiApi = require('mediawiki-api');\n\nwiki = new MediaWikiApi('your-wiki.org');\n```\n\nAll actions happen over HTTP.\n\n### Configuration\n\nThe only configurable property is ''isBot'', which is true by default.\n\n```javascript\nwiki.isBot = (true || false);\n```\n\n### Events\n\nEvery function returns an event emitter that will emit three events:\n\n* complete &mdash; Called when the request is complete. Gives err and res as\nparameters.\n* error &mdash; Called when the request is complete and there is an error.\n* result &mdash; Called when the request is complete, and there is no error.\n\nAn optional parameter after each method is a callback to be called when the\ncomplete event is fired.\n\n## Functionality\n\n### Logging In/Out\n\nLogging in is important for making sure your edits are done under a bot\naccount.\n\n```javascript\nwiki.login(username, password, callback)\n```\n\nLogging out is less important, but it is a good idea not to leave sessions\nopen longer than necessary. You also cannot use the session after the wrapper\nis closed, so there's little reason not to logout after you are done.\n\n```javascript\nwiki.logout(callback)\n```\n\n#### Example\n\nHere's an example of logging in and then logging out.\n\n```javascript\nwiki.login('user', 'mysecret', function (err, res) {\n    if (err) {\n        console.log(err);\n        return;\n    }\n\n    // We are currently logged in.\n\n    // Do stuff logged in.\n\n    wiki.logout(function (err, res) {\n        if (err) {\n            console.log(err);\n            return;\n        }\n\n        // We are now logged out.\n    });\n});\n```\n\n### Getting Article Contents\n\n```javascript\nwiki.getArticleContents(article, callback)\n```\n\n__article__ is the title of the article or the article id.\n\nOnly one article should be sent. A request for multiple articles will return\nonly one article in an arbitrary fashion.\n\nThe contents of the article is a plain old string.\n\n### Editing Pages\n\n```javascript\nwiki.edit(article, body, callback)\n```\n\nThe **article** can be either a string for the page name or a number for its\nid.\n\nThe **body** can contain all of the parameters found at\nhttps://www.mediawiki.org/wiki/API:Edit. Even so, it requires one of the\nfollowing properties: text, appendtext, prependtext\n\nIf *appendtext* or *prependtext* are set, then the *text* parameter is\nignored.\n\nThe edit token and md5 verification are automatically handled for you.\n\nEdits done by this method will not create new pages, or restore deleted pages.\n\n### Getting Category Members\n\n```javascript\nwiki.categorymembers(category, query, callback)\n```\n\nYou can pass any parameter that starts with 'cm' into the query, but don't\ninclude the 'cm' in it. This query is limited to 50 by default. The results\nare not cleaned up, and you'll get the raw response.\n\n#### Example\n\nThis script will get the first 500 articles in the Author category in the main\nnamespace, put their titles into an array, and then print the array to the\nconsole.\n\n```javascript\nwiki.getCategoryMembers(\"Author\", {\n    limit: 500,\n    prop: 'title',\n    namespace: 0,\n}, function (err, res) {\n    if (err) {\n        console.log(err);\n        return;\n    }\n\n    for (page in res.query.categorymembers) {\n        var article = res.query.categorymembers[page];\n        output.push(article.title);\n    }\n    \n    console.log(output);\n});\n```\n\n### Searching for Pages\n\n* http://www.mediawiki.org/wiki/API:Search\n\n```javascript\nwiki.search(searchString, query)\n```\n\nYou can pass any of the search parameters to query. The query defaults to 5\nresults. You get an array of results, each result having the following fields:\n\n* ns - Namespace id of the article.\n* title\n* snippet - Some text on the page.\n* size - Number of bytes of the page.\n* wordcount - Number of words on the page.\n* timestamp - When this information was generated.\n\n#### Example\n\nThis example prints the first ten titles of the search 'Wizard' on the DnD\nWiki.\n\n```javascript\ndndwiki = new MediaWikiApi(\"dnd-wiki.org/\");\n\ndndwiki.search(\"Wizard\", {\n    limit: 10,\n    what: \"text\"\n}).on(\"result\", function (articles) {\n    for (var ix = 0; ix < articles.length; ix++) {\n        console.log(articles[ix].title);\n    }\n});\n```\n\n## Unimplemented Functionality\n\nIf you use any of the methods described here, file an issue explaining what\nyou used them for.\n\n### Tokens\n\nOther than edit tokens being handled by the edit method, you'll need to get\nand inject the other tokens. The _getToken private method will do that.\n\n```javascript\nwiki._getToken(tokenType, callback)\n```\n\n### Generic POST, GET, and Requests\n\n```javascript\nwiki._post(query, body, callback)\nwiki._get(query, callback)\nwiki._query(query, callback)\nwiki._request(query, callback, method, body)\n```\n\nAs of right now, there's no function other than the private _request method\nthat can handle things you usually have to be logged in to do.\n\n__query__ is an object representation of the URL parameters. For example,\n{\n    action: 'query',\n    list: 'categorymembers'\n    cmtitle: 'Category:Author'\n    cmlimit: 50\n}\n\nBy default, format: 'json' will be added to all queries.\n\nIf you use, _query, then the method is get, and action: 'query' is set by\ndefault.\n\n__callback__ is explained eariler.\n\n__method__ is the HTTP method. I.E. GET or POST.\n\n__body__ is the body of the message as a JS object. Only use for HTTP\nmethods that have a body.\n\n## Final Words\n\nAgain, the features that exist here exist because they were needed for a very\nspecific itch. If you need any additional features, they can be added.\n\nIf you do queries that are passed the results limit, you'll have to configure\nthe continuations yourself. This might be handled by the library automatically\nin the future.",
  "readmeFilename": "readme.md",
  "_id": "mediawiki-api@0.1.5",
  "dist": {
    "shasum": "03c27ad91246bc0d2fcb81d6951150424d4f6842"
  },
  "_from": "mediawiki-api@0.1.5",
  "_resolved": "https://registry.npmjs.org/mediawiki-api/-/mediawiki-api-0.1.5.tgz"
}
